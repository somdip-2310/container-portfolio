
spring.application.name=container-platform
server.port=8085

# AWS Configuration
aws.region=us-east-1
aws.accountId=257394460825

# AWS Credentials (Use environment variables or IAM role in production)
# aws.accessKeyId=${AWS_ACCESS_KEY_ID}
# aws.secretKey=${AWS_SECRET_ACCESS_KEY}

# ECS Configuration
aws.ecs.cluster=somdip-dev-cluster
aws.ecs.subnet1=subnet-0898fa26f801e02e6
aws.ecs.subnet2=subnet-05f5eb045c9fc3256
aws.ecs.securityGroup=sg-0eea0e0636bdba13f
aws.ecs.taskRoleArn=arn:aws:iam::257394460825:role/ContainerPlatformServiceRole
aws.ecs.executionRoleArn=arn:aws:iam::257394460825:role/ecsTaskExecutionRole

# DynamoDB Configuration
aws.dynamodb.endpoint=https://dynamodb.us-east-1.amazonaws.com
aws.dynamodb.tables.users=container-platform-users
aws.dynamodb.tables.containers=container-platform-containers
aws.dynamodb.tables.deployments=container-platform-deployments

# S3 Configuration
aws.s3.bucket.logs=somdip-platform-logs-257394460825
aws.s3.bucket.backups=somdip-platform-backups-257394460825
aws.s3.bucket.assets=somdip-platform-assets-257394460825

# ALB Configuration
aws.alb.arn=arn:aws:elasticloadbalancing:us-east-1:257394460825:loadbalancer/app/somdip-dev-alb/da06983ec5afdb9a
#aws.alb.targetGroup.arn=arn:aws:elasticloadbalancing:us-east-1:257394460825:targetgroup/container-platform-tg/abcdef123456
aws.alb.dnsName=somdip-dev-alb-856223136.us-east-1.elb.amazonaws.com

# Route53 Configuration
aws.route53.hostedZoneId=Z008791832S15G195DEET
aws.route53.domain=somdip.dev
aws.route53.subdomain.prefix=container

# ECR Configuration
aws.ecr.registry=257394460825.dkr.ecr.us-east-1.amazonaws.com
aws.ecr.repository.platform=somdip/container-platform
aws.ecr.repository.users=somdip/user-containers

# CloudWatch Configuration
aws.cloudwatch.namespace=ContainerPlatform
aws.cloudwatch.logGroup.platform=/ecs/container-platform
aws.cloudwatch.logGroup.users=/ecs/user-containers

# Secrets Manager Configuration
aws.secretsmanager.secret.config=container-platform/config
aws.secretsmanager.secret.db=container-platform/db-config

# Spring Security Configuration
spring.security.user.name=admin
spring.security.user.password=changeme
spring.devtools.restart.enabled=false


# Thymeleaf Configuration
spring.thymeleaf.cache=false
spring.thymeleaf.mode=HTML

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.metrics.export.cloudwatch.enabled=true
management.metrics.export.cloudwatch.namespace=${aws.cloudwatch.namespace}

# Logging Configuration
logging.level.root=INFO
logging.level.dev.somdip=DEBUG
logging.level.software.amazon.awssdk=INFO
logging.level.org.springframework.security=DEBUG

# Application Configuration
app.container.limits.free=1
app.container.limits.starter=3
app.container.limits.pro=10
app.container.limits.scale=25

app.container.resources.free.cpu=256
app.container.resources.free.memory=512
app.container.resources.starter.cpu=512
app.container.resources.starter.memory=2048
app.container.resources.pro.cpu=1024
app.container.resources.pro.memory=8192
app.container.resources.scale.cpu=2048
app.container.resources.scale.memory=16384

# JWT Configuration
jwt.secret=${JWT_SECRET:YourSuperSecretKeyForJWTShouldBeAtLeast256BitsLong}
jwt.expiration=86400000
jwt.api.expiration=31536000000

# Rate Limiting
app.rateLimit.enabled=true
app.rateLimit.requests.perMinute=60
app.rateLimit.requests.perHour=1000


# Add these properties to application.properties

# Target Group Configuration (this needs to be created in AWS)
# For now, using the platform target group
aws.alb.targetGroup.arn=arn:aws:elasticloadbalancing:us-east-1:257394460825:targetgroup/container-platform-tg/c4d8e5f6a7b8c9d0

# Health Check Configuration
app.healthcheck.default.path=/health
app.healthcheck.default.interval=30
app.healthcheck.default.timeout=5
app.healthcheck.default.healthyThreshold=2
app.healthcheck.default.unhealthyThreshold=3

# Deployment Configuration
app.deployment.timeout.minutes=10
app.deployment.rollback.enabled=true
app.deployment.circuitBreaker.enabled=true

# Container Insights Configuration
aws.containerInsights.enabled=true
